{
	"info": {
		"_postman_id": "fd310291-385a-4b58-85ce-41d26ae86de1",
		"name": "Postman_hw2_Vadim",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"http://162.55.220.72:5005/first\r",
							"     1. Отправить запрос.\r",
							"     2. Статус код 200\r",
							"     3. Проверить, что в body приходит правильный string.*/\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							" http://162.55.220.72:5005/user_info_3 \r",
							" 1. Отправить запрос.\r",
							"2. Статус код 200 */\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json() \r",
							"//let resp_name = jsonData.name;\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test('name is Vova', function () {\r",
							"    pm.expect(jsonData.name).to.eql('Vova');\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test('age is 36', function () {\r",
							"    pm.expect(+jsonData.age).to.eql(+36) ;\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary is 3000\", function () {\r",
							"    pm.expect(+jsonData.salary).to.eql(+3000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"let req_salary = req.salary\r",
							"console.log(req_salary)\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Name is Vova', function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name)\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Age  is 36', function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age)\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Salary is 3000', function () {\r",
							"    pm.expect(String(jsonData.salary)).to.eql(req.salary)\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log('Family include ', jsonData.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test('salary_1_5 is 12000', function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary*4)  //только почему на 4?\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vova",
							"type": "default"
						},
						{
							"key": "age",
							"value": "36",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/object_info_3\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" \r",
							"pm.test(\"Name is Vova\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age is 36\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary is 4000\", function () {\r",
							"    pm.expect(String(resp.salary)).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"let respDog = resp.family.pets.dog;\r",
							"pm.test('Dog has params name ', function(){\r",
							"    pm.expect(respDog).to.have.property('name');\r",
							"});\r",
							"//Вот еще один способ:\r",
							"/*\r",
							"pm.test('Dog has params name', function () {         \r",
							"    pm.expect(JSON.stringify(respDog)).to.include('name');\r",
							"}); */ \r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('Dog has params age', function(){\r",
							"    pm.expect(respDog).to.have.property('age');\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test('DogName is Luky', function() {\r",
							"    pm.expect(respDog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test('DogAge is 4', function(){\r",
							"    pm.expect(respDog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vova&age=36&salary=4000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vova"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/object_info_4\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test('Resp name is Nina', function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('Resp age is 33', function(){\r",
							"    pm.expect(String(resp.age)).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log('Req salary is '+ req.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log('Resp salary is '+ resp.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log('Resp salary_0 is '+ resp.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log('Resp salary_1 is '+ resp.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log('Resp salary_2 is '+ resp.salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Resp salary_0 is 2000', function () {\r",
							"    pm.expect(String(resp.salary[0])).to.eql(req.salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('Resp salary_1 is 4000', function(){\r",
							"    pm.expect(Number(resp.salary[1])).to.eql(req.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('Resp salary_2 is 6000', function(){\r",
							"    pm.expect(resp.salary[2]).to.eql(String(req.salary*3));\r",
							"});\r",
							"/*15. Создать в окружении переменную name\r",
							"16. Создать в окружении переменную age\r",
							"17. Создать в окружении переменную salary */\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set('name', req.name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set('age', req.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary', req.salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"console.log('salary inqludes:')\r",
							"for (let i = 0; i<resp.salary.length; i++) {\r",
							"   console.log(resp.salary[i])\r",
							"} "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nina&age=33&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nina"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/user_info_2\r",
							"//1. Вставить параметр salary из окружения в request\r",
							"pm.environment.get(\"salary\");  \r",
							"\r",
							"//НЕ ПОНИМАЮ ЭТОТ ТЕСТ С GET -он ничего не забирает! Запрос не отправляется если руками не вбить окружение\r",
							"\r",
							"//2. Вставить параметр age из окружения в request\r",
							"pm.environment.get(\"age\");\r",
							"\r",
							"//3. Вставить параметр name из окружения в request\r",
							"pm.environment.get(\"name\");\r",
							"\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Resp has property start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Resp has property qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Resp has property qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Resp has property qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Resp has property qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Resp has property person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary is 2000 (request salary)\", function () {\r",
							"    pm.expect(+resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_6m is salary*2 \", function () {\r",
							"    pm.expect(+resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_12m is salary*2.7\", function () {\r",
							"    let respSalary12m = resp.qa_salary_after_12_months;\r",
							"    let reqSalary2_7 = req.salary*2.7;\r",
							"    pm.expect(+respSalary12m).to.eql(reqSalary2_7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"respSalary1_5y is reqSalary3_3 \", function () {\r",
							"    let respSalary1_5y = resp['qa_salary_after_1.5_year'];\r",
							"    let reqSalary3_3 = req.salary*3.3;\r",
							"    pm.expect(+respSalary1_5y).to.eql(reqSalary3_3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"respSalary3_5y is reqSalary3_8 \", function () {\r",
							"    let respSalary3_5y = resp['qa_salary_after_3.5_years'];\r",
							"    let reqSalary3_8 = req.salary*3.8;\r",
							"    pm.expect(+respSalary3_5y).to.eql(reqSalary3_8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Person.u_name[1] is salary(2000)\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql+(req.salary);\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Person.u_age is age(33)\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql+(req.age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"    pm.test(\"reqSalary4_2 is respSalary_5y\", function () {\r",
							"        let reqSalary4_2  = req.salary*4.2;\r",
							"        let respSalary_5y = resp.person.u_salary_5_years;\r",
							"           pm.expect(+respSalary_5y).to.eql(+reqSalary4_2);\r",
							"    });\r",
							"    \r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" console.log('Person consists of:')\r",
							"for (let param in resp.person) {\r",
							"   console.log(` ${param} - ${resp.person[param]}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"contentType": "",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"contentType": "",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"contentType": "",
							"type": "default"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}